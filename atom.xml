<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[eval's 2ndary memory]]></title>
  <link href="http://eval-scheme.github.io/atom.xml" rel="self"/>
  <link href="http://eval-scheme.github.io/"/>
  <updated>2015-03-28T08:38:31+09:00</updated>
  <id>http://eval-scheme.github.io/</id>
  <author>
    <name><![CDATA[eval]]></name>
    <email><![CDATA[eval.scheme@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debian7 & Laptopで画面を閉じるとサスペンドする…]]></title>
    <link href="http://eval-scheme.github.io/blog/2015/03/28/gnome-power/"/>
    <updated>2015-03-28T08:19:34+09:00</updated>
    <id>http://eval-scheme.github.io/blog/2015/03/28/gnome-power</id>
    <content type="html"><![CDATA[<h5>Q. Debian7のノートPCで画面を閉じるとサスペンドするよ〜</h5>

<h5>A. おとなしく設定をコマンドラインでいじりなさい</h5>

<!-- more -->


<h2>何が問題なのか？</h2>

<p>正直に言って、現状私は普段使いのデスクトップ環境として
Xfceを使っている。特に理由は無いが、強いて言うならば軽いというのが大きい。</p>

<p>もちろん実測したわけでも無いのであくまで体感的なものであるわけだが……</p>

<p>Debianは標準のデスクトップ環境がGnome3なわけだから、
それを使おうと思うことも無いわけではない。</p>

<p>しかしそこで問題が発生する。Xfceでやっていたように画面を閉じて
画面の電源だけを消して作業を続けてもらおうとすると……サスペンドしやがる。</p>

<p>余計なお世話というか何というか、勝手にサスペンドしてくれる仕様のようだ。
でも私は画面を閉じる動作にサスペンドを望んでいないっ!!</p>

<p>そこで設定をいじろうと設定を開いて探すが……画面を閉じた時の動作が存在しない。
どうしてだ〜と考えていると、コマンドラインで編集できるのではと言う考えに
至った。そこで調べてみるとヒットするではないか。ここは自分用のメモだし、
ほとんどまんまを書くことをゆるしてほすぃな〜とか。</p>

<p><a href="http://d.hatena.ne.jp/naokibtn/20130602/1370193887" title="naokibtnの日記">GNOME3(Debian7)ノート 環境で、フタ閉じてもサスペンドしない</a></p>

<p>真面目に描くとよくわからなくなるので最初に解決する方法をかく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gsettings set org.gnome.settings-daemon.plugins.power lid-close-ac-action 'blank'
</span><span class='line'>#AC接続時
</span><span class='line'>$ gsettings set org.gnome.settings-daemon.plubins.power lid-close-battery-action 'blank'
</span><span class='line'>#Battery起動時</span></code></pre></td></tr></table></div></figure>


<p>この2つをお好みに合わせて書けば解決する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nesus7]]></title>
    <link href="http://eval-scheme.github.io/blog/2015/03/10/nesus7/"/>
    <updated>2015-03-10T08:17:38+09:00</updated>
    <id>http://eval-scheme.github.io/blog/2015/03/10/nesus7</id>
    <content type="html"><![CDATA[<h5>Q.Nexus7が錘に近いものになったっ！</h5>

<h5>A.おとなしくファクトリーイメージを焼け!!</h5>

<!-- more -->


<h2>状態</h2>

<p>私みたいなアホはそういないと思いますが、Nexus7を買って嬉しくなって
root化しようとしました。</p>

<p>しかし私は知りません。その時すでにOSがlolipop(5.0.2)まで
アップデートされていたことを… 結果としてroot化にはもちろん失敗
(4系の方法でやってしまった)。状態として、fastbootモードは起動するけど……
ってことになった。</p>

<p>諦めず調べてみた結果…
<a href="https://developers.google.com/android/nexus/images" title="Google">公式</a> に
修復の仕方が載ってるではないか!!</p>

<p>まあ、本来はただただファクトリーイメージを書き込むだけで、ADBがつながることが
前提らしいが…</p>

<p>幸い、弄るためにPCにあるVMの一つがUSBデバッグのパーミッションを受け取っていたので
そこからイジイジすることになった。</p>

<h2>上手な焼き方</h2>

<p>上手も何も公式どおりに…いけばいいね。
そんな訳がなく、紆余曲折があった…</p>

<h3>失敗: 公式どおりにやったこと</h3>

<p>公式に書いてあるとおりにやるとうまくいかなかった。
何が原因かはよくわからん。</p>

<p>その時の手順…</p>

<p>事前準備：AndroidSDKのインストール等でADBやfastbootコマンドを
使えるようにしておくこと。(debian系だとnexus-toolsをaptから拾うのが速い？)</p>

<ol>
<li><a href="https://developers.google.com/android/nexus/images" title="Google">公式</a>から使ってるデバイスにあったイメージを持ってくる</li>
<li>↑のイメージ(.tgzファイル)を適当なディレクトリで展開する</li>
<li>デバイスをfastbootモードで起動(デバイスごとに異なる)しUSBで接続する</li>
<li>もしブートローダーがアンロックされていないなら</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fastboot oem unlock</span></code></pre></td></tr></table></div></figure>


<p>でアンロックすること。ここからはコマンドラインの操作。</p>

<ol>
<li>端末から展開されたディレクトリに入る</li>
<li><p>flash-allスクリプトを実行する</p></li>
<li><p>ブートローダーをロックし直す(必須ではない)</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fastboot oem lock</span></code></pre></td></tr></table></div></figure>


<p>公式はこうだっていうんだけど、このとおりにやったらむしろうまくいかなかった。</p>

<p>そういう時はおとなしく途中の処理を分解してワンステップずつやってやることになる。</p>

<h3>実際に成功した例</h3>

<p>上記の通り公式の方法ではうまくいかなかったので
<a href="http://juggly.cn/archives/133821.html" title="juggly.cn">Nexusデバイスをファクトリーイメージを利用してAndroid 5.0（Lollipop）に手動アップデートする方法</a>
の方法を利用した。（むしろまんま）</p>

<p>アンロックする、展開するまでは同じで端末から展開されたディレクトリに入るのも同じ。
違うのはそこからで</p>

<ol>
<li>展開結果で現れたzipファイルを更に展開する</li>
<li>ブートローダーから手動で以下のコマンドを実行</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fastboot flash system system.img
</span><span class='line'>fastboot flash recovery recovery.img
</span><span class='line'>fastboot flash boot boot.img
</span><span class='line'>fastboot reboot</span></code></pre></td></tr></table></div></figure>


<p>以上でうまく往く…気がする！基本的に文鎮化てきな状態になるような
操作はしないのが望ましいけど、たまに遊びたくなっちゃうことも有るよね？
って話。それでは今日はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ローカルにGitサーバを建てる話]]></title>
    <link href="http://eval-scheme.github.io/blog/2014/11/07/localgit/"/>
    <updated>2014-11-07T17:33:16+09:00</updated>
    <id>http://eval-scheme.github.io/blog/2014/11/07/localgit</id>
    <content type="html"><![CDATA[<h5>Q.ローカルネットワークにgitサーバが欲しいなっ！</h5>

<h5>A.はいgitolite</h5>

<!-- more -->


<h2>Gitとは…</h2>

<p>多分この記事を読むような人は知ってるだろうから飛ばそうかとも思うけど
自分用のメモと言う事を考えると少しくらいは書いておこうかなと。</p>

<p>GitはSVNを置き換えるように作成されている分散型バージョン管理システム
のことで巨大なプロジェクトにも対応できるように動作速度に
重点が置かれている。</p>

<p>メインのリポジトリの他にブランチと呼ばれる枝を作成してその上で
開発をすすめることなど、様々な特徴がある。</p>

<p>詳細は</p>

<ul>
<li><a href="http://git-scm.com/book/ja/v1/%E4%BD%BF%E3%81%84%E5%A7%8B%E3%82%81%E3%82%8B-Git%E3%81%AE%E5%9F%BA%E6%9C%AC">git general</a> : 使い始める - Gitの基本</li>
<li><a href="http://ja.wikipedia.org/wiki/Git">wikipedia</a> : Git</li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1307/05/news028.html">IT Media</a> : ガチで5分で分かる分散型バージョン管理システムGit</li>
</ul>


<p>などを参考にしてもらいたい。</p>

<h2>GitリポジトリサービスGitHub</h2>

<p>じゃあGitHubではダメなのか？って疑問が当然出てくる。
GitHubは確かにGitホスティングサービスとしてとても大きいし
私も登録してたまには使用している。でも…私が書くようなプログラムや
自分用の設定などを全世界の人に公開するほどの度胸もなければ
出来ればプライベートに進めたいものもあるのでローカルに作ることに。</p>

<p>またGitリポジトリホスティングサービスはGitHubの他にもいろいろある。
詳細は
<a href="http://www.find-job.net/startup/5-git-hosting">Gitホスティングサービス5選</a>
等で確認してもらいたい。</p>

<h2>本題：Gitolite</h2>

<h3>Gitolite とは？</h3>

<p>公開したくない。ちょっとローカルで共有したいだけ。そんなリポジトリが
生まれることも多々あると思う。かと言ってGitHubのプライベートリポジトリ
をお金を払って作る程でもない。そんな時に役立つのがこのGitoliteだ。</p>

<p>サーバにインストールし稼働させることで専用のGitホスティングサーバと
することができる。</p>

<p>管理するリポジトリやその設定、果てはユーザの管理までもGitリポジトリで行う。
詳しくは<a href="http://gitolite.com/gitolite/index.html">本家</a>を参照。</p>

<h2>Install</h2>

<h3>構成予定</h3>

<p>まず今回目標とする構成を挙げる。
Server</p>

<ul>
<li>OS:Raspbian</li>
<li>software:gitolite</li>
<li>その他依存ソフトなど:ssh git &hellip;etc</li>
<li>gitolite user:git</li>
</ul>


<p>Client</p>

<ul>
<li>OS:Debian 7 Wheezy</li>
<li>software:ssh git</li>
<li>その他依存ソフトなど:&hellip;?</li>
</ul>


<p>ユーザなどは欲しくなるたびに追加するからどうとでも。</p>

<h3>Step1. 管理者用SSH公開鍵の作成、登録</h3>

<h4>SSH公開鍵の作成</h4>

<p>まずは建てたサーバの管理者とするためのユーザを用意しなければ
いけない。gitoliteではsshの認証はすべてsshの公開鍵認証で
行われる。そのために管理者用のssh公開鍵を用意する必要がある。</p>

<p>既存のものをそのまま使うならばそれでこの場所は終わりで登録まで進む。</p>

<p>何でもいいのでターミナルを開く。その上で</p>

<figure class='code'><figcaption><span>sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssy-keygen # fオプションでファイル名を指定できる。くわしくはhelp参照</span></code></pre></td></tr></table></div></figure>


<p>で公開鍵と秘密鍵のペアを作成する。その公開鍵を何らかの手段で
サーバに転送しておく。(おそらくはSFTPやSCPが便利だろう)</p>

<h3>公開鍵の登録</h3>

<p>公開鍵はコンフィグを行う際に登録する。そのためまずは本体のインストールを
行う。いくつかのOSでは公式リポジトリにバイナリがあるのでaptやaptitude,
yumなどからインストールできる。</p>

<p>折角用意してくれているのでそれを利用する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get install gitolite</span></code></pre></td></tr></table></div></figure>


<p>これで一発でインストールできてしまうんだから簡単なもんだ。</p>

<p>gitoliteを管理するユーザとして新しいユーザgitを用意した。
パスワードなどは設定していないのでrootからgitユーザにログインする。
そしてgitユーザとして以下のコマンドを実行する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gl-setup key.pub # key.pubは先程の公開鍵を設定する</span></code></pre></td></tr></table></div></figure>


<p>これで必要なことはすべてやってくれる。</p>

<p>さてここからはクライアントに戻って作業をすすめる。</p>

<h3>Step2.クライアントサイドでの設定</h3>

<p>さてSSHのコネクションは一回切っても構わない。次に先ほどの管理者用とした
鍵を利用してgitoliteの管理者として行うべき設定を行う。</p>

<p>まずはローカルに設定用のリポジトリをクローンする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@&lt;domain>:gitolite-admin
</span><span class='line'>$ cd gitolite-admin</span></code></pre></td></tr></table></div></figure>


<p>ここにあるkeydirディレクトリに公開鍵を追加することでユーザとして
gitoliteを使用出来るようになる。
新しいリポジトリの追加は管理者しか行うことができない。追加の方法は
confディレクトリ配下の.confファイルを編集する。</p>

<p>リポジトリの名前とアクセス権を書き並べていく事になる。また、このファイルは
単純な置き換えを使える。うまく使用してらくすることも可能だろう。</p>

<p>置き換えの設定は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@name = name1 name2</span></code></pre></td></tr></table></div></figure>


<p>のように書く。使用するときもただ他の単語のように@をつけたまま置くだけでいい。
これは単純な置換なのでユーザとリポジトリの違いを考慮できない。</p>

<p>これで分かるようにgitoliteを使用する場合は管理者が新しいリポジトリを
追加する作業をする必要がある。それだけが少し面倒な点かな…</p>

<p>リポジトリのアクセス権はR,RW,RW+と一切与えないというものがある。
@allとなっているところはすべてのユーザに許可を与えると言う設定である。</p>

<p>Linuxなどを触っていたらRやRWは分かると思うが一応説明。</p>

<ul>
<li>R: Read only.</li>
<li>RW: Read and Write</li>
<li>RW+: 巻き戻し可能</li>
<li>-: 拒否</li>
</ul>


<p>となっている。これをリポジトリの設定として書いていく事になる。また
リポジトリネームやディレクトリ名は正規表現が使用可能となっている。
必要に応じて使うといいだろう。適応順は上から順に確認されていく。
そのためあるディレクトリ以外へのRW+を与えたい時には</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- somedire = user
</span><span class='line'>RW+ = user</span></code></pre></td></tr></table></div></figure>


<p>のようにすることになる。</p>

<p>とりあえず、以上で今回の投稿を終わろう。</p>

<p>…ちなみになぜGitサーバが立っているのかは謎。私がこれを建てたときは
本当はシェルの設定をイジイジしていたはずなのになぜか気がついたら
Gitサーバを建ててた。</p>

<p>追記：
一度ハマったことがあったので報告。</p>

<p>本来はきっとパブリックキーをkeydirに設置してpushしたら自動でほにゃらら
してくれるんだろうけれどもそんなことをしてくれなかったからどうしたのかって話。</p>

<p>結局自動的に追加されてるのってなんだろうって確認した時にわかったのが
gitユーザーように作成されている.sshディレクトリ配下のauthorized_keysに
設定を追記していると言う事がわかった。</p>

<p>そこを読むと特定の接続元からアクセスがあった際はこのコマンドを実行する
という事などが書いてある。</p>

<p>今まで書かれていた鍵の設定と同じように書いてみたらいけたから
最悪そこから追加すればいい。なにか解決策が間違っているような気がするけど
気にしたら負けだと思ってる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian(系)でBondingしたいな〜って]]></title>
    <link href="http://eval-scheme.github.io/blog/2014/11/02/debian-bonding/"/>
    <updated>2014-11-02T20:54:14+09:00</updated>
    <id>http://eval-scheme.github.io/blog/2014/11/02/debian-bonding</id>
    <content type="html"><![CDATA[<h5>Q.複数のNICに同じIPを振りたいなって</h5>

<h5>A.はいBonding</h5>

<!-- more -->


<h2>What is Bonding?</h2>

<p>多分こんなのを見る人は私くらいだから自分用の説明をしなくては…</p>

<p>Bondingとはタイトルの通り1台のPCに接続された複数のNICに
同じIPアドレスを割り振る方法。なんでそんな事するかって言うと
通信帯域の拡張やアクセスの容易さを求めて実行する。</p>

<p>ちなみに逆に一つのNICに複数のIPアドレスを割り振るIPエイリアス
と呼ばれる機能もある。こちらはただifconfigで実行できるので
とても容易である。</p>

<p>閑話休題。</p>

<p>私がそんなことを実行したのはファイルサーバとして使ってるやつだから
複数のアクセスを想定してLANケーブルが2本刺さってる怪しいラズパイを
用意してたんだけどいちいちアドレス変えるの面倒なのと
SSHするときに警告が出ることがあってそれがもういいなと。</p>

<p>今回それをやったのがまたネットワーク越しのサーバ機だから
以前に出てきたRaspberryPiにWiFi(CUI)の話が生きてくる。
つまりBondingしない接続先を一つ用意しておいた。</p>

<p>まあ、普通にやる場合は手元のマシンだろうからそんなことを考えなくて
いいんだろうけど。</p>

<h2>How to use?</h2>

<p>何をするかって言うとまずパッケージのインストール。
今回新たに必要になるのは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ifenslave-2.6</span></code></pre></td></tr></table></div></figure>


<p>これのインストールが終わったらやることはとても簡単。</p>

<figure class='code'><figcaption><span>sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># nano /etc/network/interfaces</span></code></pre></td></tr></table></div></figure>


<p>で開いて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet dhcp
</span><span class='line'>
</span><span class='line'>auto eth1
</span><span class='line'>iface eth1 inet dhcp</span></code></pre></td></tr></table></div></figure>


<p>としていたところを</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet manual
</span><span class='line'>bond-master bond0
</span><span class='line'>
</span><span class='line'>auto eth1
</span><span class='line'>iface eth1 inet manual
</span><span class='line'>bond-master bond0
</span><span class='line'>
</span><span class='line'>auto bond0
</span><span class='line'>iface bond0 inet dhcp
</span><span class='line'>  slaves eth0 eht1
</span><span class='line'>  bond_miimon 100
</span><span class='line'>  bond_downdelay 200
</span><span class='line'>  bond_updelay 200
</span><span class='line'>  bond-lacp-rate 4
</span><span class='line'>  bond-slaves none</span></code></pre></td></tr></table></div></figure>


<p>とする。こうすると
もうほぼ終わったようなもので、
後何が足りないかって言うとdhcp側の設定だけになってくる。
ちなみにボンディングインタフェースのMACアドレスは
bond_primaryを設定しないと最初に書いたものになるっぽい。</p>

<p>今回はこれで終了っ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RaspberryPiでLUKS暗号化HDDを起動時にマウント]]></title>
    <link href="http://eval-scheme.github.io/blog/2014/11/02/luks-01/"/>
    <updated>2014-11-02T17:49:04+09:00</updated>
    <id>http://eval-scheme.github.io/blog/2014/11/02/luks-01</id>
    <content type="html"><![CDATA[<h5>Q.一応ファイルサーバを暗号化したいなって</h5>

<h5>A.はいLUKS</h5>

<!-- more -->


<h2>LUKS is 何？</h2>

<p>LUKSとはdm-cryptを使用したファイルシステムの暗号化に用いられる
ソフトウェア。基本的にファイルシステムの暗号化を基本として、
ループバックデバイスを暗号化する際にも用いられる。</p>

<p>今回はファイルサーバとしたRaspberryPiにLUKSで暗号化したHDD
をUSBでマウントするお話。</p>

<h2>HDDをフォーマット</h2>

<p>用意したHDDのパーティショニングが済んだらLUKSデバイスとして
利用できるように操作していく。</p>

<p>とくに難しい設定とかをする気がない簡単な方法で説明していくけど…
まずはLUKSデバイスとしてフォーマットする。この時にしっかり警告が
出るけれども、本当にいいかどうかの確認だから正確に答えればOK。</p>

<figure class='code'><figcaption><span>sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cryptsetup luksFormat /dev/hda1</span></code></pre></td></tr></table></div></figure>


<p>そして</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter LUKS passphrase:</span></code></pre></td></tr></table></div></figure>


<p>となっているところに自分で設定したいパスフレーズを入力する。
なお、ここで入力したパスフレーズは後から変えることができる。</p>

<p>次に作成したLUKSデバイスを開き、テキトーな場所にまうんとする。
今回は~/tmpにマウントすることにする。</p>

<figure class='code'><figcaption><span>sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cryptsetup luksOpen /dev/hda1 luks</span></code></pre></td></tr></table></div></figure>


<p>これで/dev/mapper/配下にluksというデバイスファイルができた。
後はこれを通常のファイルシステムを作成するときと同じように
形式を選択してフォーマットする。今回はext4。</p>

<figure class='code'><figcaption><span>sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mkfs.ext4 /dev/mapper/luks
</span><span class='line'># mount /dev/mapper/luks ~/tmp</span></code></pre></td></tr></table></div></figure>


<p>これでマウントまでできているはず。ちなみにLUKSデバイスを
停止するときはアンマウントした後に</p>

<figure class='code'><figcaption><span>sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cryptsetup luksClose luks</span></code></pre></td></tr></table></div></figure>


<p>で停止できる。</p>

<p>さて、ここまで出できたのはあくまでファイルシステムと暗号化の
お話だけでまだOS起動時にマウントなどという事はできていない。</p>

<h2>OS起動時にマウントできるようにする</h2>

<h3>キーファイルの登録</h3>

<p>まずは私はLUKSデバイスのパスはキーファイルでも行けることを利用して</p>

<figure class='code'><figcaption><span>sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># dd if=/dev/urandom of=/boot/key-file count=1024 bs=1
</span><span class='line'># cryptsetup luksAddKey /dev/hda1 /boot/key-file
</span><span class='line'># cryptsetup luksDump /dev/hda1</span></code></pre></td></tr></table></div></figure>


<p>までを実行するとキーファイルの生成から追加、その確認が行えるはず！
一応登録したキーファイルでマウントできることを確認する。</p>

<figure class='code'><figcaption><span>sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cryptsetup luksOpen /dev/hda1 --key-file /boot/key-file</span></code></pre></td></tr></table></div></figure>


<p>しかし私は考えた。USBメモリにキーファイルを入れて
持ち歩けばいいのではと。その結果キーファイルをUSBにコピーして
無事にマウントできることは確認した。さてここからファイルシステムの
マウントのお話になる。</p>

<h3>OS起動時にマウントさせる</h3>

<p>OS起動時にマウントさせるために絶対に必要なのはデバイスファイル名が
一定であること。実はUSBで複数のデバイスを接続しているとたまに
デバイスファイル名が切り替わってしまうことがある。</p>

<p>それを防ぎたいのでudevとか言う存在を使おうと思ったが思い立った。
「<strong>UUID</strong>でいいじゃないカッ！」と。</p>

<p>UUIDとは各デバイスによって一意に定まるので、OS起動時に
デバイスファイル名が変わっていようともUUIDは変わらない。</p>

<p>また、/dev/disk/by-uuid にあるファイルは/dev/sd*nなどへの
シンボリックリンクとなっているのでマウント可能である。</p>

<p>それを利用して/etc/fstabにUSBのマウント先を記述。更に
/etc/crypttabにLUKSデバイスの設定を書き、最後に/etc/rc.local
にcryptdisk statとmonutを記述する。これで完成。</p>

<p>この投稿は以上っ！お疲れ様でしたっ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RaspberryPiにWiFiを導入(CUI)]]></title>
    <link href="http://eval-scheme.github.io/blog/2014/11/01/raspi-wifi/"/>
    <updated>2014-11-01T23:11:59+09:00</updated>
    <id>http://eval-scheme.github.io/blog/2014/11/01/raspi-wifi</id>
    <content type="html"><![CDATA[<p>実は前回の話をするときの前にやってたことなんだけど…</p>

<!-- more -->


<p>今サーバとして使われているラズパイが２つあって、内一つは
普段からLANケーブルが２本刺さってる状態にあって、それぞれに
IPアドレスがふられていた。</p>

<p>それを何とかしようと思った私は「そうだ、Bondingしよっ！」と
思い立ったわけだけど、サーバ用だからディスプレイもないし
そもそもキーボードとかも用意していない。果ては部屋の隅に
埋まっている状況で、かろうじてUSBポートに手が出せる感じたった。</p>

<p>そこで私は余っていたWiFiドングルを取り出しておもむろに接続し…</p>

<h2>Installs</h2>

<p>まずはお決まりのインストールから。私が使ったパッケージは
<strong>wpa_supplicant</strong>だけ新しくインストール。</p>

<p>これも例のごとくaptで取得できる。</p>

<h2>無線LANの設定</h2>

<p>ドングルを接続し、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>dmesg
</span></code></pre></td></tr></table></div></figure>


<p>によってカーネルメッセージなどを確認することによって
USBデバイスがきちんと認識されていることを確認した後、</p>

<figure class='code'><figcaption><span>sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># nano /etc/cat /etc/network/interfaces</span></code></pre></td></tr></table></div></figure>


<p>で編集することになる。編集内容は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auto wlan0
</span><span class='line'>iface wlan0 inet dhcp
</span><span class='line'>wpa-conf /etc/wpa_supplicatn/wpa_supplicant.conf</span></code></pre></td></tr></table></div></figure>


<p>という記述を追加する。
その後に、楽な方法を取ろうかと思ってやったのが
<a href="" title="http://hukuroufc2.blog.fc2.com/blog-entry-32.html">Not Found Parameter</a>
に載っていた方法。先ほどインストールしたソフトはそのため。</p>

<p>何をするのかというと…</p>

<figure class='code'><figcaption><span>sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wpa_passphrase SSID Passphrase > /etc/wpa_supplicatn/wpa_supplicant.conf</span></code></pre></td></tr></table></div></figure>


<p>としてやると、既存の設定は消え去るがとても楽に話が済む。もちろんSSIDと
Passphraseは自分の環境に合わせて変えなければならないけれども。</p>

<p>こうして書き込んだファイルを開き更に数行追加する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">key_mgmt</span><span class="o">=</span>WPA-PSK
</span><span class='line'><span class="nv">proto</span><span class="o">=</span>WPA WPA2
</span><span class='line'><span class="nv">pairwise</span><span class="o">=</span>CCMP TKIP
</span><span class='line'><span class="nv">group</span><span class="o">=</span>CCMP TKIP
</span></code></pre></td></tr></table></div></figure>


<p>という行を先ほどのファイルの中括弧内に追加する。</p>

<p>それからさきはもう一旦wlan0を落としてからもう一度起動する。
これでうまく言ってたらおめでとう！</p>

<p>なお、DHCPにアクセスする前提で記述してるが、そうでない場合は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>iface wlan0 inet static
</span></code></pre></td></tr></table></div></figure>


<p>と書くなどしてそれぞれの設定を書かないといけない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ラズパイにNFSを構成する話]]></title>
    <link href="http://eval-scheme.github.io/blog/2014/11/01/exports/"/>
    <updated>2014-11-01T18:04:15+09:00</updated>
    <id>http://eval-scheme.github.io/blog/2014/11/01/exports</id>
    <content type="html"><![CDATA[<p>Q.RaspberryPiにNFSサーバを構築したいんだっ！</p>

<p>A.はい/etc/exports</p>

<!-- more -->


<p>当たり前の話ですけれでもサーバなんて建てればいいってわけじゃなくて
いれた後にいろんな設定をしたりそもそもいろんな設定をしなければだったり
するわけで…</p>

<p>まあ、久しぶりにやったら忘れるよね。そんなわけで忘れ難くならないかな〜
とか期待しつつ備忘録第一号として書いてみる。</p>

<h2>Install</h2>

<p>本当はこれ自体はだいぶ前から入れてあったけどついでにまとめ直してみる。</p>

<h3>NFSサーバのインストール</h3>

<p>一番簡単なのはaptコマンドを使って入れちゃうこと。OS標準のままで
インストールできるからルート権限持ってるなら簡単。(まあ、ラズパイ
使っててルート権限ないとか言う事態を考えたくないし…)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-get install nfs-common nfs-kernel-server</span></code></pre></td></tr></table></div></figure>


<p>これだけ。あとはOS起動時に走るようにしなきゃだけど…
aptで入れるとたいていは自動的に設定される。そうでなかったら</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># chkconfig nfs-common on
</span><span class='line'># chkconfig nfs-kernel-server on</span></code></pre></td></tr></table></div></figure>


<p>とでもしてあげるとちゃんと動く。ちなみにchkconfigコマンドは
標準じゃないっぽいから使うときには入れなくてはいけない。
(多分こんなコマンドだから直接弄るファイルがあるんだろうけど)</p>

<h2>/etc/exportsの設定</h2>

<p>最初に言ったようにここの設定をいじくってあげないとNFSは
何もお話しません。こいつをどう設定するかって言うと…</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>srv-dirs hostname1(options) hostname2(options)</span></code></pre></td></tr></table></div></figure>


<p>というふうに書くことになる。詳しいことはいろいろ調べれば出てくると
思うけど…例えば</p>

<p><a href="" title="http://www.turbolinux.com/support/document/knowledge/555.html">turbolinux</a></p>

<p>みたいなところでお話してくれる。私の設定は公開しないほうがいいようななぞ
設定になってると思うから…</p>

<h2>マウントする</h2>

<p>実際に他のマシンからマウントする前にまず自分のマシンからマウント
してみたほうがいいかもしれません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mount -t nfs localhost:/srv/dir-name mount-point</span></code></pre></td></tr></table></div></figure>


<p>これでなんにもエラーが出なければおめでとうございます。
普通に設定で許可されているマシンからマウントできることでしょう！</p>

<p>私はここに共用のデータなどを入れています。まだこの設定のまま
お外につなげるのは怖くて…</p>

<p>とりあえずこのポストはこれくらいで終了とします。
読んでいただきありがとうございます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Success]]></title>
    <link href="http://eval-scheme.github.io/blog/2014/10/26/success/"/>
    <updated>2014-10-26T02:51:09+09:00</updated>
    <id>http://eval-scheme.github.io/blog/2014/10/26/success</id>
    <content type="html"><![CDATA[<h1>Successful!!</h1>

<p>なんとかOctpressのインストールと使用,並びにGitHub.ioドメインで管理される
ユーザページへのアップロードがなされました…</p>

<p>そして久しぶりに見た日本語になぜか安心している私がいます。</p>

<p>どうしてもさっきまで英語と闘うことが多かったせいか日本語だ…安心みたいな
そんな感覚でいます私ですが、これからはまともな記事を書いていけるように頑張って行きたいと思いますのでよろしくおねがいします。</p>

<p>今日はもう遅いので一回寝るかな…そうして明日から本格的に
色々書いていこうとおもいます。</p>

<!-- more -->


<p>この技術ブログ的な何かはてきとーなところで後悔するんじゃなくてGitHub.ioで
公開してるから自分でアドレスを覚えておけるのが素晴らしいとおもいます。
まあ、どんなところでも打ってるうちに覚えそうなものですけど。
（もしかして：一般的にアドレスは打たない？）</p>

<p>なにはともあれこれからよろしくおねがいします。</p>

<p>さて…一眠りした後はデザインの設定とか色々待ってるな…</p>

<p>基本的に備忘録として使って行きたいと思ってますが、何か要望なんかがあったら
教えてください。善処します。（実現確率がががっ）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test]]></title>
    <link href="http://eval-scheme.github.io/blog/2014/10/26/test/"/>
    <updated>2014-10-26T02:13:02+09:00</updated>
    <id>http://eval-scheme.github.io/blog/2014/10/26/test</id>
    <content type="html"><![CDATA[<p>This is test message for me to you.</p>

<p>I use octopress to generato this page and any other.</p>

<p>Can I use this?</p>

<p>I&rsquo;m losing my pride&hellip;</p>
]]></content>
  </entry>
  
</feed>
